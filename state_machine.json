{
    "StartAt": "Get Organizations",
    "States": {
        "Get Organizations": {
            "Type": "Task",
            "Resource": "${get_organizations_lambda}",
            "ResultPath": "$",
            "Next": "Prepare Organizations",
            "Retry": [ {
                "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
             } ],
             "Catch": [ {
                "ErrorEquals": [ "TFCCustomError", "TFCHTTPBadRequest"],
                "Next": "Error Handler Organizations",
                "ResultPath": "$.result"
             } ]
        },

        "Error Handler Organizations": {
            "Type": "Task",
            "ResultPath": "$",
            "Resource": "${handle_error_lambda}",
            "Next": "Finished"
         },
        "Prepare Organizations": {
            "Type": "Task",
            "Resource": "${prepare_organizations_lambda}",
            "ResultPath": "$.org_ids",
            "Next": "Backup Workspace State",
            "Retry": [ {
                "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
             } ]
        },
        "Backup Workspace State": {
            "Type": "Map",
            "ItemsPath": "$.org_ids",
            "ResultPath": "$",
            "MaxConcurrency": 5,
            "Next": "Send Report",
            "Iterator": {
                "StartAt": "Get Workspaces",
                "States": {
                    "Get Workspaces": {
                        "Type": "Task",
                        "Resource": "${get_workspaces_lambda}",
                        "ResultPath":"$",
                        "Next": "Prepare Workspaces",
                        "Retry": [ {
                            "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                            "IntervalSeconds": 2,
                            "MaxAttempts": 6,
                            "BackoffRate": 2
                         } ],
                         "Catch": [ {
                            "ErrorEquals": [ "TFCCustomError" , "TFCHTTPBadRequest"],
                            "Next": "Error Handler Workspaces",
                            "ResultPath": "$.result"
                         } ]

                    },
                    "Error Handler Workspaces": {
                        "Type": "Task",
                        "ResultPath": "$",
                        "Resource": "${handle_error_lambda}",
                        "End": true
                     },
                    "Prepare Workspaces": {
                        "Type": "Task",
                        "Resource": "${prepare_workspaces_lambda}",
                        "ResultPath":"$",
                        "Next": "Create Workspace State Backup",
                        "Retry": [ {
                            "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                            "IntervalSeconds": 2,
                            "MaxAttempts": 6,
                            "BackoffRate": 2
                         } ]
                    },
                    "Create Workspace State Backup": {
                        "Type": "Map",
                        "ItemsPath": "$.ws",
                        "Parameters": {
                            "ws.$": "$$.Map.Item.Value",
                            "org_id.$": "$.org_id"
                          },
                        "ResultPath": "$",
                        "MaxConcurrency": 5,
                        "End": true,
                        "Iterator": {
                            "StartAt": "Backup State",
                            "States": {
                                "Backup State": {
                                    "Type": "Task",
                                    "Resource": "${create_workspace_state_backup_lambda}",
                                    "ResultPath": "$.result",
                                    "Retry": [ {
                                        "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                                        "IntervalSeconds": 2,
                                        "MaxAttempts": 6,
                                        "BackoffRate": 2
                                     } ],
                                    "Catch": [ {
                                        "ErrorEquals": [ "TFCCustomError", "TFCHTTPBadRequest"],
                                        "Next": "Error Handler Backup",
                                        "ResultPath": "$.result"
                                     } ],
                                    "End": true
                                
                            
                                },
                                "Error Handler Backup": {
                                    "Type": "Task",
                                    "ResultPath": "$",
                                    "Resource": "${handle_error_lambda}",
                                    "End": true
                                 }
                            }
                           
                        }
                      
                    }
                }
               
              
            }
           
        },
        "Send Report": {
            "Type": "Task",
            "Resource": "${send_report_lambda}",
            "ResultPath": "$",
            "Retry": [ {
                "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
             } ],
            "Next": "Empty Bucket"
        },
        "Empty Bucket": {
            "Type": "Task",
            "Resource": "${clean_up_lambda}",
            "ResultPath": "$",
            "Retry": [ {
                "ErrorEquals": [ "Lambda.ServiceException", "Lambda.AWSLambdaException", "Lambda.SdkClientException"],
                "IntervalSeconds": 2,
                "MaxAttempts": 6,
                "BackoffRate": 2
             } ],
             "Catch": [ {
                "ErrorEquals": [ "ClientError"],
                "Next": "Finished"
             } ],
            "Next": "Finished"
        },
        "Finished": {
            "Type": "Pass",
            "End": true
         }
    }
}