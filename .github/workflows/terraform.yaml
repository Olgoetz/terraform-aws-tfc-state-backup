name: Terraform

on: [push, pull_request]

env:
  TF_WORKING_DIR: './examples'
  AWS_REGION: 'eu-central-1'
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
# permission can be added at job level or workflow level
permissions:
  actions: write
  id-token: write
  contents: read # This is required for actions/checkout
jobs:
  terraform_job:
    name: 'Terraform'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      # - name: configure aws credentials
      #   uses: aws-actions/configure-aws-credentials@v1
      #   with:
      #     role-to-assume: arn:aws:iam::037638919006:role/github-actions-ago-sharedregistry-role
      #     role-session-name: DeployNow
      #     aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1

      - name: Terraform Format
        id: fmt
        run: terraform fmt -recursive -check .

      - name: Terraform Init
        id: init
        run: terraform -chdir=$TF_WORKING_DIR init

      - name: Terraform Validate
        id: validate
        run: terraform -chdir=$TF_WORKING_DIR validate -no-color

      - name: Terraform Plan
        id: plan
        if: github.event_name == 'push'
        run: terraform -var tfc_token="" -chdir=$TF_WORKING_DIR plan -no-color -input=false
        continue-on-error: true

      - uses: actions/github-script@v6
        if: github.event_name == 'push'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.ACTIONS_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })

      - name: Terraform Plan Status
        if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terraform Apply
        if: github.event_name == 'push'
        run: terraform -chdir=./examples -var tfc_token="" apply -auto-approve -input=false

      - name: Terraform Destroy
        if: github.event_name == 'push'
        run: terraform -chdir=./examples -var tfc_token="" destroy -auto-approve -input=false